// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  player_id   Int       @id @default(autoincrement())
  first_name  String?   @db.VarChar(50)
  last_name   String?   @db.VarChar(50)
  username    String?   @unique @db.VarChar(50)
  email       String?   @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  bio         String?   @db.VarChar(500)
  looking_for String?   @db.VarChar(500)
  image       String?
  favorite_games       String?   @db.VarChar(500)
  favorite_device      String?   @db.VarChar(500)
  instagram   String?   @db.VarChar(500)
  twitter     String?   @db.VarChar(500)
  facebook    String?   @db.VarChar(500)
  twitch      String?   @db.VarChar(500)
  discord     String?   @db.VarChar(500)
  accounts    Account[]
  sessions    Session[]

  dislikedPlayers          DislikedProfile[] @relation("dislikedprofiles_disliked_player_idToplayer")
  dislikingPlayers         DislikedProfile[] @relation("dislikedprofiles_player_idToplayer")
  likedPlayers             LikedProfile[]    @relation("likedprofiles_liked_player_idToplayer")
  likingPlayers            LikedProfile[]    @relation("likedprofiles_player_idToplayer")
  matchedProfilesAsPlayer1 MatchedProfile[]  @relation("matchedprofiles_player_id_1Toplayer")
  matchedProfilesAsPlayer2 MatchedProfile[]  @relation("matchedprofiles_player_id_2Toplayer")
}

model DislikedProfile {
  player_id          Int
  disliked_player_id Int

  player             Player @relation("dislikedprofiles_disliked_player_idToplayer", fields: [disliked_player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  dislikedPlayer     Player @relation("dislikedprofiles_player_idToplayer", fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id, disliked_player_id])
}

model LikedProfile {
  player_id       Int
  liked_player_id Int

  player          Player @relation("likedprofiles_liked_player_idToplayer", fields: [liked_player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  
  likedPlayer     Player @relation("likedprofiles_player_idToplayer", fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id, liked_player_id])
}

model MatchedProfile {
  player_id_1 Int
  player_id_2 Int
  player1     Player @relation("matchedprofiles_player_id_1Toplayer", fields: [player_id_1], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  player2     Player @relation("matchedprofiles_player_id_2Toplayer", fields: [player_id_2], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id_1, player_id_2])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         String   @unique
  player_Id    Int
  expires      DateTime

  player Player @relation(fields: [player_Id], references: [player_id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  player_Id         Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  player Player @relation(fields: [player_Id], references: [player_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
